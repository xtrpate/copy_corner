# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import sys
import subprocess
import mysql.connector
import tkinter as tk
import re
import bcrypt
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox, ttk

all_users = []
admin_name = "Admin"  # Default if not passed
if len(sys.argv) > 1:
    admin_name = sys.argv[1]  # Get admin name from command-line argument
else:
    print("Warning: Admin name not provided to notification script.")


def fetch_users():
    """Fetches user_id and username from the users table."""
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",  # Add your password if you have one
            database="copy_corner_db"
        )
        cursor = conn.cursor(dictionary=True)
        query = "SELECT user_id, username FROM users ORDER BY user_id ASC"
        cursor.execute(query)
        rows = cursor.fetchall()
        cursor.close()
        conn.close()
        return rows
    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error fetching users:\n{err}")
        return []


def fetch_user_details(user_id):
    """Fetches detailed information for a specific user, including stats."""
    details = {}
    try:
        conn = mysql.connector.connect(
            host="localhost", user="root", password="", database="copy_corner_db"
        )
        cursor = conn.cursor(dictionary=True)

        # Fetch basic user info
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
        user_info = cursor.fetchone()
        if not user_info:
            return None  # User not found
        details.update(user_info)  # Add all columns from users table

        # Fetch print job stats
        cursor.execute("""
            SELECT
                COUNT(*) as total_jobs,
                SUM(CASE WHEN status = 'Completed' THEN 1 ELSE 0 END) as completed_jobs,
                SUM(CASE WHEN status = 'Voided' THEN 1 ELSE 0 END) as voided_jobs,
                SUM(CASE WHEN status = 'Completed' THEN pages ELSE 0 END) as total_pages
            FROM print_jobs
            WHERE user_id = %s
        """, (user_id,))
        stats = cursor.fetchone()
        if stats:
            details.update(stats)  # Add stats columns

        cursor.close()
        conn.close()

        # Format date if needed (assuming 'created_at' exists)
        if 'created_at' in details and details['created_at']:
            details['member_since'] = details['created_at'].strftime('%Y-%m-%d')  # Or desired format
        else:
            details['member_since'] = '-'

        # Provide defaults for potentially missing stats
        details['total_jobs'] = details.get('total_jobs', 0)
        details['completed_jobs'] = details.get('completed_jobs', 0)
        details['voided_jobs'] = details.get('voided_jobs', 0)
        details['total_pages'] = details.get('total_pages', 0) or 0  # Handle potential None from SUM

        # Add role (assuming it's always 'User' based on your table structure)
        # If you add roles later, fetch it from user_info
        details['role'] = details.get('role', 'User')

        return details

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error fetching user details:\n{err}")
        return None


def disable_selected_user():
    """Disable the selected user account by setting status='disabled'."""
    global selected_user_row_bg

    # Check if a user is selected
    if not selected_user_row_bg or not hasattr(selected_user_row_bg, "user_data"):
        messagebox.showwarning("No Selection", "Please select a user to disable.")
        return

    user_data = selected_user_row_bg.user_data
    user_id = user_data["user_id"]

    confirm = messagebox.askyesno("Confirm Disable", f"Are you sure you want to disable user ID {user_id}?")
    if not confirm:
        return

    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="copy_corner_db"
        )
        cursor = conn.cursor()

        # Update the user's status to 'disabled'
        cursor.execute("UPDATE users SET status = 'disabled' WHERE user_id = %s", (user_id,))
        conn.commit()
        cursor.close()
        conn.close()

        messagebox.showinfo("Account Disabled", f"User ID {user_id} has been disabled successfully.")

        # Optional: refresh user list
        global all_users
        all_users = fetch_users()
        display_users_list(user_content_frame, all_users)

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error disabling user:\n{err}")

def reset_password():
    """Reset password for selected user with validation."""
    global selected_user_row_bg

    if not selected_user_row_bg or not hasattr(selected_user_row_bg, "user_data"):
        messagebox.showwarning("No Selection", "Please select a user to reset password.")
        return

    user_data = selected_user_row_bg.user_data
    user_id = user_data["user_id"]
    username = user_data["username"]

    # Create password reset dialog
    reset_window = tk.Toplevel(window)
    reset_window.title(f"Reset Password - {username}")
    reset_window.geometry("400x260")
    reset_window.resizable(False, False)
    reset_window.configure(bg="#FFFFFF")
    reset_window.transient(window)
    reset_window.grab_set()

    # Center the window
    reset_window.update_idletasks()
    x = (window.winfo_screenwidth() // 2) - (reset_window.winfo_width() // 2)
    y = (window.winfo_screenheight() // 2) - (reset_window.winfo_height() // 2)
    reset_window.geometry(f"+{x}+{y}")

    # Labels and entries
    tk.Label(reset_window, text=f"Reset Password for {username}",
             font=("Inter Bold", 14), bg="#FFFFFF").pack(pady=10)

    tk.Label(reset_window, text="New Password:",
             font=("Inter", 10), bg="#FFFFFF", anchor="w").pack(fill="x", padx=20, pady=(5, 0))
    new_password_entry = tk.Entry(reset_window, show="*", font=("Inter", 10),
                                  highlightthickness=1, highlightcolor="#000000")
    new_password_entry.pack(fill="x", padx=20, pady=5)

    tk.Label(reset_window, text="Confirm New Password:",
             font=("Inter", 10), bg="#FFFFFF", anchor="w").pack(fill="x", padx=20, pady=(5, 0))
    confirm_password_entry = tk.Entry(reset_window, show="*", font=("Inter", 10),
                                      highlightthickness=1, highlightcolor="#000000")
    confirm_password_entry.pack(fill="x", padx=20, pady=5)

    tk.Label(reset_window,
             text="Password must include:\n• 8+ chars  • Uppercase  • Lowercase\n• Number  • Special character",
             font=("Inter", 8), bg="#FFFFFF", justify="left", fg="#666666").pack(fill="x", padx=20, pady=5)

    def validate_and_reset():
        new_password = new_password_entry.get().strip()
        confirm_password = confirm_password_entry.get().strip()

        # Basic validation
        if not new_password or not confirm_password:
            messagebox.showerror("Error", "Please fill in both password fields.")
            return
        if new_password != confirm_password:
            messagebox.showerror("Error", "Passwords do not match.")
            return
        if len(new_password) < 8:
            messagebox.showerror("Error", "Password must be at least 8 characters long.")
            return
        if not re.search(r"[A-Z]", new_password):
            messagebox.showerror("Error", "Password must contain at least one uppercase letter.")
            return
        if not re.search(r"[a-z]", new_password):
            messagebox.showerror("Error", "Password must contain at least one lowercase letter.")
            return
        if not re.search(r"\d", new_password):
            messagebox.showerror("Error", "Password must contain at least one number.")
            return
        if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", new_password):
            messagebox.showerror("Error", "Password must contain at least one special character.")
            return

        try:
            # Hash the password before saving
            hashed_password = bcrypt.hashpw(new_password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")

            conn = mysql.connector.connect(
                host="localhost",
                user="root",
                password="",
                database="copy_corner_db"
            )
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET password = %s WHERE user_id = %s", (hashed_password, user_id))
            conn.commit()
            cursor.close()
            conn.close()

            messagebox.showinfo("Success", f"Password for {username} has been securely reset.")
            reset_window.destroy()

        except mysql.connector.Error as err:
            messagebox.showerror("Database Error", f"Error resetting password:\n{err}")

    # Buttons
    button_frame = tk.Frame(reset_window, bg="#FFFFFF")
    button_frame.pack(fill="x", padx=20, pady=10)

    tk.Button(button_frame, text="Reset Password", command=validate_and_reset,
              bg="#4CAF50", fg="white", font=("Inter Bold", 10), width=15).pack(side="right", padx=5)
    tk.Button(button_frame, text="Cancel", command=reset_window.destroy,
              bg="#f44336", fg="white", font=("Inter Bold", 10), width=15).pack(side="right", padx=5)

    new_password_entry.focus_set()

def activate_selected_user():
    """Activate the selected user account by setting status='active'."""
    global selected_user_row_bg

    if not selected_user_row_bg or not hasattr(selected_user_row_bg, "user_data"):
        messagebox.showwarning("No Selection", "Please select a user to activate.")
        return

    user_data = selected_user_row_bg.user_data
    user_id = user_data["user_id"]

    confirm = messagebox.askyesno("Confirm Activate", f"Are you sure you want to activate user ID {user_id}?")
    if not confirm:
        return

    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="copy_corner_db"
        )
        cursor = conn.cursor()

        # Update the user's status to 'active'
        cursor.execute("UPDATE users SET status = 'active' WHERE user_id = %s", (user_id,))
        conn.commit()
        cursor.close()
        conn.close()

        messagebox.showinfo("Account Activated", f"User ID {user_id} has been activated successfully.")

        # Refresh user list
        global all_users
        all_users = fetch_users()
        display_users_list(user_content_frame, all_users)

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error activating user:\n{err}")




def fetch_recent_activity(user_id):
    """Fetch recent activity logs of a user."""
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="copy_corner_db"
        )
        cursor = conn.cursor(dictionary=True)
        cursor.execute("""
            SELECT action, created_at 
            FROM activity_logs 
            WHERE user_id = %s 
            ORDER BY created_at DESC 
            LIMIT 10
        """, (user_id,))
        activities = cursor.fetchall()
        cursor.close()
        conn.close()
        return activities
    except mysql.connector.Error as err:
        print("Database error while fetching activity:", err)
        return []


def update_user_details(details):
    """Updates the canvas text items with the fetched user details."""
    canvas.delete("user_detail")  # Clear previous details

    if not details:
        # Optionally display 'No user selected' or leave blank
        canvas.create_text(366.0, 98.0, anchor="nw", text="Name: -",
                           fill="#000000", font=("Inter Bold", 13 * -1), tags="user_detail")
        # ... create placeholder text for other fields if desired ...
        return
    # --- Recent Activity Section ---
    recent_activities = fetch_recent_activity(details.get('user_id'))

    if recent_activities:
        y_position = 480  # starting position for activity logs
        for activity in recent_activities:
            created_at = activity.get('created_at', '') or ''
            action_text = f"{created_at} - {activity['action']}"
            canvas.create_text(
                275.0, y_position, anchor="nw",
                text=action_text,
                fill="#000000",
                font=("Inter", 10 * -1),
                tags="user_detail"
            )
            y_position += 18
    else:
        canvas.create_text(
            275.0, 480.0, anchor="nw",
            text="No recent activity found.",
            fill="#999999",
            font=("Inter Italic", 10 * -1),
            tags="user_detail"
        )

    # --- Account Status Indicator ---
    status = details.get('status', 'active')
    if status == 'disabled':
        canvas.create_text(
            550.0, 98.0,  # position near the name
            anchor="nw",
            text="⚠️ DISABLED",
            fill="#FF0000",
            font=("Inter Bold", 12 * -1),
            tags="user_detail"
        )

    # --- Header Section ---
    canvas.create_text(366.0, 98.0, anchor="nw", text=f"Name: {details.get('fullname', '-')}",
                       fill="#000000", font=("Inter Bold", 13 * -1), tags="user_detail")
    canvas.create_text(366.0, 98.0, anchor="nw", text=f"Name: {details.get('fullname', '-')}",
                       fill="#000000", font=("Inter Bold", 13 * -1), tags="user_detail")
    canvas.create_text(366.0, 118.0, anchor="nw", text=f"Role: {details.get('role', 'User')}",
                       fill="#000000", font=("Inter Bold", 12 * -1), tags="user_detail")
    canvas.create_text(366.0, 138.0, anchor="nw", text=f"Member since: {details.get('member_since', '-')}",
                       fill="#000000", font=("Inter Bold", 12 * -1), tags="user_detail")
    # Add Picture logic here if you store/retrieve image paths

    # --- Stats Section ---
    canvas.create_text(273.0, 196.0, anchor="nw", text=f"{details.get('total_jobs', 0)}",
                       fill="#000000", font=("Inter Bold", 20 * -1), tags="user_detail")  # Total Jobs
    canvas.create_text(464.0, 196.0, anchor="nw", text=f"{details.get('completed_jobs', 0)}",
                       fill="#000000", font=("Inter Bold", 20 * -1), tags="user_detail")  # Completed
    canvas.create_text(273.0, 255.0, anchor="nw", text=f"{details.get('voided_jobs', 0)}",
                       fill="#000000", font=("Inter Bold", 20 * -1), tags="user_detail")  # Voided
    canvas.create_text(464.0, 255.0, anchor="nw", text=f"{details.get('total_pages', 0)}",
                       fill="#000000", font=("Inter Bold", 20 * -1), tags="user_detail")  # Pages Printed

    # --- Profile Section ---
    canvas.create_text(350.0, 327.0, anchor="nw", text=f"{details.get('fullname', '-')}",  # Adjusted X for value
                       fill="#000000", font=("Inter", 12 * -1), tags="user_detail")  # Full name
    canvas.create_text(350.0, 347.0, anchor="nw", text=f"{details.get('username', '-')}",  # Adjusted X for value
                       fill="#000000", font=("Inter", 12 * -1), tags="user_detail")  # Username
    canvas.create_text(350.0, 367.0, anchor="nw", text=f"{details.get('email', '-')}",  # Adjusted X for value
                       fill="#000000", font=("Inter", 12 * -1), tags="user_detail")  # Email
    canvas.create_text(350.0, 387.0, anchor="nw", text=f"{details.get('contact', '-')}",  # Adjusted X for value
                       fill="#000000", font=("Inter", 12 * -1), tags="user_detail")  # Contact
    # IMPORTANT: Avoid displaying raw passwords. Show asterisks or omit.
    canvas.create_text(350.0, 407.0, anchor="nw", text="********",  # Adjusted X for value
                       fill="#000000", font=("Inter", 12 * -1), tags="user_detail")  # Password
    # Labels for buttons
    canvas.create_text(568.0, 454.0, anchor="nw", text="Disable", fill="#000000", font=("Inter Bold", 10 * -1),
                       tags="user_detail")
    canvas.create_text(564.0, 486.0, anchor="nw", text="Activate", fill="#000000", font=("Inter Bold", 10 * -1),
                       tags="user_detail")


    # --- Bind the Disable button ---
    disable_button_rect = canvas.create_rectangle(543.0, 447.0, 626.0, 472.0, fill="#FFFFFF", outline="#000000")
    canvas.tag_bind(disable_button_rect, "<Button-1>", lambda e: disable_selected_user())

    # Activate button
    activate_button_rect = canvas.create_rectangle(543.0, 479.0, 626.0, 504.0, fill="#FFFFFF", outline="#000000")
    canvas.tag_bind(activate_button_rect, "<Button-1>", lambda e: activate_selected_user())


    canvas.tag_raise(disable_button_rect)
    canvas.tag_raise(activate_button_rect)
    canvas.tag_raise("user_detail")


selected_user_row_bg = None


def display_users_list(frame, users_to_display):
    """
    Displays the given list of users in the right-side scrollable frame.
    Adds hover effects and click handlers to each row.
    """
    global selected_user_row_bg  # Allow modification of the global variable

    # Clear old user widgets
    for widget in frame.winfo_children():
        widget.destroy()

    # Set column weights for proper spacing
    frame.columnconfigure(0, weight=1)
    frame.columnconfigure(1, weight=3)

    # --- Click and Hover Handlers ---
    def on_row_enter(event, bg_widget):
        # Change background color on hover if not selected
        if bg_widget != selected_user_row_bg:
            bg_widget.config(bg="#E0F0FF")  # Light blue hover
        frame.config(cursor="hand2")

    def on_row_leave(event, bg_widget):
        # Change background back if not selected
        if bg_widget != selected_user_row_bg:
            bg_widget.config(bg="white")
        frame.config(cursor="")

    def on_row_click(event, user_data, bg_widget):
        global selected_user_row_bg
        if selected_user_row_bg and selected_user_row_bg.winfo_exists():
            selected_user_row_bg.config(bg="white")
        bg_widget.config(bg="#CCE5FF")
        selected_user_row_bg = bg_widget
        bg_widget.user_data = user_data  # <— add this line

        details = fetch_user_details(user_data['user_id'])
        update_user_details(details)

    # --- Add each user to the frame ---
    row_index = 0
    for user in users_to_display:
        # Background Frame for hover/selection
        # Use a Frame instead of Label for background to avoid text clipping issues
        row_bg_frame = tk.Frame(frame, bg="white")
        row_bg_frame.grid(row=row_index, column=0, columnspan=2, sticky="ew")
        # Configure columns inside the background frame as well
        row_bg_frame.columnconfigure(0, weight=1)
        row_bg_frame.columnconfigure(1, weight=3)

        # User ID Label (Place inside the row_bg_frame)
        id_label = tk.Label(
            row_bg_frame,  # Parent is now row_bg_frame
            text=user["user_id"],
            font=("Inter Bold", 14 * -1),
            bg="white",  # Inherit background initially
            anchor="nw"
        )
        id_label.grid(row=0, column=0, sticky="nw", padx=(15, 0), pady=5)

        # Username Label (Place inside the row_bg_frame)
        username_label = tk.Label(
            row_bg_frame,  # Parent is now row_bg_frame
            text=user["username"],
            font=("Inter Bold", 14 * -1),
            bg="white",  # Inherit background initially
            anchor="nw"
        )
        username_label.grid(row=0, column=1, sticky="nw", padx=(10, 0), pady=5)

        # Separator Line (Still placed in the main 'frame')
        line_sep = ttk.Separator(frame, orient="horizontal")
        line_sep.grid(row=row_index + 1, column=0, columnspan=2, sticky="ew")

        # Bind events to all elements within the row background frame
        for widget in [row_bg_frame, id_label, username_label]:
            widget.bind("<Enter>", lambda e, bg=row_bg_frame: on_row_enter(e, bg))
            widget.bind("<Leave>", lambda e, bg=row_bg_frame: on_row_leave(e, bg))
            # Pass user data and the background frame to the click handler
            widget.bind("<Button-1>", lambda e, u=user, bg=row_bg_frame: on_row_click(e, u, bg))
            # Make labels transparent to background frame color changes
            if widget != row_bg_frame:
                widget.bind("<Map>", lambda e, w=widget: w.config(bg=w.master.cget('bg')))  # Update on map
                widget.bind("<<BackgroundChanged>>", lambda e, w=widget: w.config(
                    bg=w.master.cget('bg')))  # Custom event if needed, Map is usually enough

        row_index += 2


def on_user_search(event):
    """Filters the user list on the canvas based on search entry text."""
    search_term = search_entry.get().lower()

    if not search_term:
        # If search bar is empty, show all users
        filtered_users = all_users
    else:
        filtered_users = []
        for user in all_users:
            # Convert user_id to string for searching
            user_id_str = str(user["user_id"])
            username_str = str(user["username"]).lower()

            # Check if search term is in either the ID or the username
            if search_term in user_id_str or search_term in username_str:
                filtered_users.append(user)

    # Update the call to use the new frame
    display_users_list(user_content_frame, filtered_users)


# --- Scrollbar Helper Functions ---

def on_frame_configure(canvas):
    """Reset the scroll region to encompass the inner frame"""
    canvas.configure(scrollregion=canvas.bbox("all"))


def on_mousewheel(event, canvas):
    """Scroll the canvas on mousewheel event, but not past the top."""
    # A positive event.delta means scrolling up
    if event.delta > 0:
        # yview() returns (top_fraction, bottom_fraction)
        # If top_fraction is 0.0, we are at the very top.
        if canvas.yview()[0] == 0.0:
            return  # Don't scroll any further

    # Otherwise (scrolling down, or scrolling up when not at top)
    # scroll as normal.
    canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")


# --- Rounded Rectangle Function ---
def round_rectangle(canvas, x1, y1, x2, y2, r=15, **kwargs):
    points = [
        x1 + r, y1, x2 - r, y1, x2, y1, x2, y1 + r,
        x2, y2 - r, x2, y2, x2 - r, y2, x1 + r, y2,
        x1, y2, x1, y2 - r, x1, y1 + r, x1, y1
    ]
    return canvas.create_polygon(points, smooth=True, **kwargs)


# --- Sidebar Buttons with Navigation ---
def open_admin_dashboard():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_dashboard.py", admin_name])


def open_admin_print():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_print.py", admin_name])


def open_admin_report():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_report.py", admin_name])


def open_admin_notification():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_notification.py", admin_name])


# --- Logout Function ---
def logout():
    messagebox.showinfo("Logged Out", "Logout successful!")
    subprocess.Popen([sys.executable, "login.py"])
    window.destroy()


def create_rounded_menu_button(canvas, x, y, w, h, text, command=None):
    rect = round_rectangle(canvas, x, y, x + w, y + h, r=10, fill="#FFFFFF", outline="#000000", width=1)
    txt = canvas.create_text(x + 25, y + 8, text=text, anchor="nw", fill="#000000", font=("Inter Bold", 15))

    def on_click(event):
        if command:
            command()

    def on_hover(event):
        canvas.itemconfig(rect, fill="#E8E8E8")
        window.config(cursor="hand2")

    def on_leave(event):
        canvas.itemconfig(rect, fill="#FFFFFF")
        window.config(cursor="")

    for tag in (rect, txt):
        canvas.tag_bind(tag, "<Button-1>", on_click)
        canvas.tag_bind(tag, "<Enter>", on_hover)
        canvas.tag_bind(tag, "<Leave>", on_leave)


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(
    r"D:\downloadss\New folder\Tkinter\Tkinter-Designer-master\build\assets\frame6")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window_width = 905
window_height = 570

screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
x = int((screen_width / 2) - (window_width / 2))
y = int((screen_height / 2) - (window_height / 2))
window.geometry(f"{window_width}x{window_height}+{x}+{y}")
window.configure(bg="#FFFFFF")
window.title("Admin User")

canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=570,
    width=894,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

canvas.create_rectangle(
    33.0,
    31.0,
    863.0,
    535.0,
    fill="#FFFFFF",
    outline="")

canvas.create_text(
    334.0,
    194.0,
    anchor="nw",
    text="-",
    fill="#000000",
    font=("Inter Bold", 16 * -1)
)

canvas.create_text(
    392.0,
    194.0,
    anchor="nw",
    text="-",
    fill="#000000",
    font=("Inter Bold", 16 * -1)
)

canvas.create_text(
    435.0,
    194.0,
    anchor="nw",
    text="-",
    fill="#000000",
    font=("Inter Bold", 16 * -1)
)

canvas.create_text(
    471.0,
    194.0,
    anchor="nw",
    text="-",
    fill="#000000",
    font=("Inter Bold", 16 * -1)
)

canvas.create_text(
    509.0,
    194.0,
    anchor="nw",
    text="-",
    fill="#000000",
    font=("Inter Bold", 16 * -1)
)

canvas.create_text(
    552.0,
    194.0,
    anchor="nw",
    text="-",
    fill="#000000",
    font=("Inter Bold", 16 * -1)
)

canvas.create_text(
    615.0,
    194.0,
    anchor="nw",
    text="-",
    fill="#000000",
    font=("Inter Bold", 16 * -1)
)

canvas.create_text(
    261.0,
    196.0,
    anchor="nw",
    text="#",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    465.0,
    167.0,
    anchor="nw",
    text="Size",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    497.0,
    167.0,
    anchor="nw",
    text="Color",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    536.0,
    167.0,
    anchor="nw",
    text="Status",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    588.0,
    167.0,
    anchor="nw",
    text="Submitted",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    385.0,
    167.0,
    anchor="nw",
    text="File",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    420.0,
    167.0,
    anchor="nw",
    text="Pages",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    307.0,
    167.0,
    anchor="nw",
    text="Username",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    272.0,
    40.0,
    anchor="nw",
    text="Print Jobs Management",
    fill="#000000",
    font=("Inter Bold", 32 * -1)
)

canvas.create_rectangle(
    41.0,
    39.0,
    244.0,
    527.0,
    fill="#FFFFFF",
    outline="")

canvas.create_text(
    117.0,
    130.0,
    anchor="nw",
    text="ADMIN",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_rectangle(
    258.0,
    32.0,
    258.0,
    536.0,
    fill="#000000",
    outline="")

canvas.create_rectangle(
    660.0,
    79.0,
    846.0,
    527.0,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    260.0,
    86.0,
    657.0,
    138.0,
    fill="#FFFFFF",
    outline="")

canvas.create_text(
    269.0,
    86.0,
    anchor="nw",
    text="Search Filr/USer:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_rectangle(
    588.0,
    101.0,
    646.0,
    132.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    482.0,
    101.0,
    579.0,
    132.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    671.0,
    335.0,
    834.0,
    366.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    722.0,
    340.0,
    anchor="nw",
    text="Approve",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_rectangle(
    671.0,
    372.0,
    834.0,
    403.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    716.0,
    379.0,
    anchor="nw",
    text="Start Print",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_rectangle(
    672.0,
    409.0,
    835.0,
    440.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    737.0,
    416.0,
    anchor="nw",
    text="Void",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_rectangle(
    671.0,
    446.0,
    834.0,
    477.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    702.0,
    453.0,
    anchor="nw",
    text="Download File",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_rectangle(
    672.0,
    483.0,
    835.0,
    514.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    701.0,
    490.0,
    anchor="nw",
    text="Message User",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_text(
    493.0,
    109.0,
    anchor="nw",
    text="All",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_rectangle(
    297.0,
    101.0,
    456.0,
    132.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    462.0,
    86.0,
    anchor="nw",
    text="Status:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    603.0,
    109.0,
    anchor="nw",
    text="Filter",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    677.0,
    94.0,
    anchor="nw",
    text="Selected Job Details",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_rectangle(
    257.0,
    183.0,
    659.9999093967635,
    185.03875948724686,
    fill="#000000",
    outline="#000000")

canvas.create_text(
    261.0,
    167.0,
    anchor="nw",
    text="Req ID",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    132.0,
    anchor="nw",
    text="Req ID:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    150.0,
    anchor="nw",
    text="User:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    168.0,
    anchor="nw",
    text="File:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    186.0,
    anchor="nw",
    text="Pages:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    204.0,
    anchor="nw",
    text="Status:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    222.0,
    anchor="nw",
    text="Submitted:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    671.0,
    246.0,
    anchor="nw",
    text="Admin Notes/Reason if voided",
    fill="#000000",
    font=("Inter Bold", 11 * -1)
)

canvas.create_rectangle(
    666.0,
    262.0,
    841.0,
    318.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    12.0,
    26.0,
    883.0,
    566.0,
    fill="#FFF6F6",
    outline="#000000")

canvas.create_text(
    716.0,
    402.0,
    anchor="nw",
    text="J",
    fill="#000000",
    font=("Inter Bold", 14 * -1)
)

canvas.create_rectangle(
    35.0,
    37.0,
    864.0,
    541.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    44.0,
    46.0,
    247.0,
    535.0,
    fill="#FFFFFF",
    outline="#000000")

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    145.0,
    84.0,
    image=image_image_2
)

canvas.create_text(
    119.0,
    135.0,
    anchor="nw",
    text="ADMIN",
    fill="#000000",
    font=("Inter Bold", 15 * -1)

)
canvas.create_rectangle(
    266.0,
    448.0,
    427.0,
    535.0,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    270.0,
    491.0,
    417.0,
    523.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    266.0,
    288.0,
    630.0,
    439.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    340.0,
    347.0,
    anchor="nw",
    text="                              ",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    313.0,
    367.0,
    anchor="nw",
    text="                                  ",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    332.0,
    387.0,
    anchor="nw",
    text="                                 ",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    276.0,
    347.0,
    anchor="nw",
    text="Username:",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    276.0,
    367.0,
    anchor="nw",
    text="Email:",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    276.0,
    387.0,
    anchor="nw",
    text="Contact:",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    276.0,
    407.0,
    anchor="nw",
    text="Password:",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    276.0,
    327.0,
    anchor="nw",
    text="Full name:",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_rectangle(
    455.0,
    230.0,
    631.0,
    284.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    266.0,
    230.0,
    442.0,
    284.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    455.0,
    171.0,
    631.0,
    225.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    265.0,
    171.0,
    441.0,
    225.0,
    fill="#FFFFFF",
    outline="#000000")

# canvas.create_text(
#     273.0,
#     196.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 20 * -1)
# )
#
# canvas.create_text(
#     464.0,
#     255.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 20 * -1)
# )
#
# canvas.create_text(
#     273.0,
#     255.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 20 * -1)
# )
#
# canvas.create_text(
#     464.0,
#     196.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 20 * -1)
# )

canvas.create_rectangle(
    266.0,
    87.0,
    630.0,
    162.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    366.0,
    98.0,
    anchor="nw",
    text="Name:",
    fill="#000000",
    font=("Inter Bold", 13 * -1)
)

canvas.create_rectangle(
    273.0,
    92.0,
    349.0,
    158.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    294.0,
    119.0,
    anchor="nw",
    text="Picture",
    fill="#000000",
    font=("Inter Bold", 10 * -1)
)

canvas.create_text(
    646.0,
    55.0,
    anchor="nw",
    text="Search",
    fill="#000000",
    font=("Inter Bold", 14 * -1)
)

# --- Search Bar for Users ---
search_entry = Entry(
    window,
    bd=0,
    bg="#FFFFFF",
    highlightthickness=1,
    highlightcolor="#000000",
    highlightbackground="#000000",
    font=("Inter", 12)
)
search_entry.place(
    x=704.0,
    y=50.0,
    width=134.0,
    height=25.0
)
# Bind the search function to run every time a key is released
search_entry.bind("<KeyRelease>", on_user_search)

canvas.create_text(
    260.0,
    46.0,
    anchor="nw",
    text="User Details",
    fill="#000000",
    font=("Inter Bold", 32 * -1)
)

canvas.create_text(
    277.0,
    296.0,
    anchor="nw",
    text="Profile",
    fill="#000000",
    font=("Inter Bold", 20 * -1)
)

canvas.create_rectangle(
    253.0,
    37.0,
    254.0,
    542.0,
    fill="#000000",
    outline="#000000")

canvas.create_rectangle(
    543.0,
    447.0,
    626.0,
    472.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    441.0,
    448.0,
    533.0,
    473.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    441.0,
    479.0,
    533.0,
    504.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    441.0,
    510.0,
    533.0,
    535.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    448.0,
    454.0,
    anchor="nw",
    text="Reset Password",
    fill="#000000",
    font=("Inter Bold", 10 * -1)
)

canvas.create_text(
    568.0,
    454.0,
    anchor="nw",
    text="Disable",
    fill="#000000",
    font=("Inter Bold", 10 * -1)
)

canvas.create_text(
    366.0,
    118.0,
    anchor="nw",
    text="Role:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    366.0,
    138.0,
    anchor="nw",
    text="Member since:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    273.0,
    178.0,
    anchor="nw",
    text="Total Jobs",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_text(
    464.0,
    178.0,
    anchor="nw",
    text="Completed",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_text(
    464.0,
    236.0,
    anchor="nw",
    text="Pages Printed",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_text(
    273.0,
    236.0,
    anchor="nw",
    text="Voided",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_text(
    286.0,
    461.0,
    anchor="nw",
    text="Recent Activity",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_rectangle(
    635.0,
    37.0,
    638.0000001341059,
    542.0000018761348,
    fill="#000000",
    outline="#000000")

# --- Scrollable User List (Sticky Header) ---

# 1. Create a main container Frame for the list
main_list_container = tk.Frame(
    window,
    bg="white",
    bd=1,
    relief="solid"
)
main_list_container.place(x=646.0, y=83.0, width=212.0, height=448.0)

# 2. Create the non-scrolling Header Frame
header_frame = tk.Frame(main_list_container, bg="white")
header_frame.pack(side="top", fill="x")

# 3. Create the container for the scrolling part
scroll_container = tk.Frame(main_list_container, bg="white")
scroll_container.pack(side="top", fill="both", expand=True)

# --- Populate Header Frame ---
header_frame.columnconfigure(0, weight=1)
header_frame.columnconfigure(1, weight=3)
id_header = tk.Label(
    header_frame,
    text="User ID",
    font=("Inter Bold", 14 * -1),
    bg="white",
    anchor="nw"
)
id_header.grid(row=0, column=0, sticky="nw", padx=(15, 0), pady=(10, 5))

username_header = tk.Label(
    header_frame,
    text="Username",
    font=("Inter Bold", 14 * -1),
    bg="white",
    anchor="nw"
)
username_header.grid(row=0, column=1, sticky="nw", padx=(10, 0), pady=(10, 5))

header_sep = ttk.Separator(header_frame, orient="horizontal")
header_sep.grid(row=1, column=0, columnspan=2, sticky="ew")

# --- Create Scrollable Widgets (inside scroll_container) ---

# 4. Create the Canvas
user_list_canvas = Canvas(
    scroll_container,
    bg="white",
    bd=0,
    highlightthickness=0
)

# 5. Create the Scrollbar
user_scrollbar = ttk.Scrollbar(
    scroll_container,
    orient="vertical",
    command=user_list_canvas.yview
)
user_list_canvas.configure(yscrollcommand=user_scrollbar.set)

# 6. Pack the Scrollbar and Canvas
user_scrollbar.pack(side="right", fill="y")
user_list_canvas.pack(side="left", fill="both", expand=True)

# 7. Create the inner Frame that will hold the user data
user_content_frame = tk.Frame(user_list_canvas, bg="white")
user_content_frame_window = user_list_canvas.create_window((0, 0), window=user_content_frame, anchor="nw")

# 8. Bind configuration and mousewheel events

# Updates scroll region when content is added/removed
user_content_frame.bind(
    "<Configure>",
    lambda event, canvas=user_list_canvas: on_frame_configure(canvas)
)

# Makes content frame fill canvas width (for full-width lines)
user_list_canvas.bind(
    "<Configure>",
    lambda e: user_list_canvas.itemconfig(user_content_frame_window, width=e.width)
)

# Bind mousewheel scrolling
user_list_canvas.bind_all(
    "<MouseWheel>",
    lambda event, canvas=user_list_canvas: on_mousewheel(event, canvas)
)
# --- END OF SCROLLABLE LIST ---


# --- DELETED OLD STATIC LIST ELEMENTS (Commented out) ---
# canvas.create_rectangle(
#     646.0,
#     83.0,
#     858.0,
#     531.0,
#     fill="#FFFFFF",
#     outline="#000000")
#
# canvas.create_text(
#     674.0,
#     101.0,
#     anchor="nw",
#     text="User ID",
#     fill="#000000",
#     font=("Inter Bold", 14 * -1)
# )
#
# canvas.create_text(
#     755.0,
#     100.0,
#     anchor="nw",
#     text="Username",
#     fill="#000000",
#     font=("Inter Bold", 14 * -1)
# )
#
# canvas.create_rectangle(
#     645.0,
#     128.0,
#     858.0,
#     129.0,
#     fill="#000000",
#     outline="#000000")
#
# canvas.create_rectangle(
#     645.0,
#     157.0,
#     858.0,
#     158.0,
#     fill="#000000",
#     outline="#000000")
#
# canvas.create_rectangle(
#     645.0,
#     275.0,
#     858.0,
#     276.0,
#     fill="#000000",
#     outline="#000000")
#
# canvas.create_rectangle(
#     645.0,
#     244.0,
#     858.0,
#     245.0,
#     fill="#000000",
#     outline="#000000")
#
# canvas.create_rectangle(
#     645.0,
#     214.0,
#     858.0,
#     215.0,
#     fill="#000000",
#     outline="#000000")
#
# canvas.create_rectangle(
#     646.0,
#     185.0,
#     858.0,
#     185.0,
#     fill="#000000",
#     outline="#000000")
# --- END OF DELETED ELEMENTS ---


canvas.create_rectangle(
    364.0,
    112.0,
    619.0,
    113.0,
    fill="#000000",
    outline="#000000")

canvas.create_rectangle(
    364.0,
    131.0,
    619.0,
    132.0,
    fill="#000000",
    outline="#000000")

canvas.create_rectangle(
    365.0,
    151.0,
    620.0,
    152.0,
    fill="#000000",
    outline="#000000")

canvas.create_text(
    568.0,
    454.0,
    anchor="nw",
    text="Disable",
    fill="#000000",
    font=("Inter Bold", 10 * -1)
)

# --- Sidebar Buttons ---
create_rounded_menu_button(canvas, 71, 150, 151, 38, "Dashboard", open_admin_dashboard)
create_rounded_menu_button(canvas, 71, 206, 151, 38, "Print Jobs", open_admin_print)
create_rounded_menu_button(canvas, 71, 263, 151, 38, "Reports", open_admin_report)
create_rounded_menu_button(canvas, 71, 320, 151, 38, "Notifications", open_admin_notification)
create_rounded_menu_button(canvas, 71, 377, 151, 38, "Settings")
create_rounded_menu_button(canvas, 89, 450, 111, 38, "Logout", logout)

all_users = fetch_users()
# Update the call to use the new frame
display_users_list(user_content_frame, all_users)

window.resizable(False, False)
window.mainloop()