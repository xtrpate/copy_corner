# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJhadav/Tkinter-Designer

from pathlib import Path
import sys
import subprocess
from tkinter import Tk, Canvas, Button, PhotoImage, messagebox
import mysql.connector
from datetime import datetime

# --- Add this block after imports ---
admin_name = "Admin" # Default if not passed
if len(sys.argv) > 1:
    admin_name = sys.argv[1] # Get admin name from command-line argument
else:
    # Optional: Handle case where admin_name isn't passed as expected
    print("Warning: Admin name not provided to dashboard.")
    # messagebox.showwarning("Startup Error", "Admin name missing.")
    # You might want to redirect to login or handle this more robustly



def update_voided_and_users_count():
    """Updates 'Voided Today' and 'Users' boxes based on the database records."""
    conn = None
    try:
        conn = create_db_connection()
        if not conn:
            return

        cursor = conn.cursor()

        # --- Count unique users who submitted at least one print job ---
        cursor.execute("SELECT COUNT(DISTINCT user_id) FROM print_jobs")
        total_users = cursor.fetchone()[0] or 0

        # --- Count how many jobs were Declined today ---
        today = datetime.now().date()
        cursor.execute("""
            SELECT COUNT(*) FROM print_jobs 
            WHERE status = 'Voided' AND DATE(created_at) = %s
        """, (today,))
        voided_today = cursor.fetchone()[0] or 0

        # --- Clear old counts ---
        canvas.delete("users_count")
        canvas.delete("voided_today_count")

        # --- Draw updated text counts ---
        # Users (bottom-right box)
        canvas.create_text(
            518, 235,  # position inside the "Users" box
            text=str(total_users),
            fill="#000000",
            font=("Inter Bold", 20),
            tags="users_count"
        )

        # Voided Today (middle-right box)
        canvas.create_text(
            520, 178,  # position inside the "Voided Today" box
            text=str(voided_today),
            fill="#000000",
            font=("Inter Bold", 20),
            tags="voided_today_count"
        )

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Failed to fetch counts: {err}")
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()



# --- Database Connection Function ---
def create_db_connection():
    """Creates and returns a connection to the MySQL database."""
    try:
        connection = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="copy_corner_db"
        )
        return connection
    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Failed to connect to database: {err}")
        return None

def update_pending_approvals_count():
    """Fetch and display the total number of pending requests."""
    conn = None
    try:
        conn = create_db_connection()
        if not conn:
            return

        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM print_jobs WHERE status = 'Pending'")
        pending_count = cursor.fetchone()[0]

        # Update the number in the Pending Approvals box
        # First, clear the old number if any (tagged for easy replace)
        canvas.delete("pending_count")

        # Then create a new text number (centered inside the box)
        canvas.create_text(
            360, 120,  # coordinates inside the box
            text=str(pending_count),
            fill="#000000",
            font=("Inter Bold", 20),
            tags="pending_count"
        )

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Failed to fetch pending count: {err}")
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()


# --- Function to update a job's status in the database ---
def update_job_status(job_id, new_status):
    """Updates the status of a specific job_id in the database and refreshes UI instantly."""
    conn = None
    try:
        conn = create_db_connection()
        if not conn:
            return

        cursor = conn.cursor()
        sql_query = "UPDATE print_jobs SET status = %s WHERE job_id = %s"
        cursor.execute(sql_query, (new_status, job_id))
        conn.commit()

        # ✅ Show confirmation popup
        messagebox.showinfo("Success", f"Job #{job_id} has been {new_status.lower()}.")

        # ✅ Refresh request table to immediately show new status text
        fetch_and_display_requests()

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Failed to update status: {err}")
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()


# --- Function to fetch and display all print requests ---
def fetch_and_display_requests():
    """Fetches all print requests and displays them in the GUI (status only, no buttons)."""
    # --- Clear previous text rows ---
    canvas.delete("request_row")

    conn = None
    try:
        conn = create_db_connection()
        if not conn:
            return

        cursor = conn.cursor(dictionary=True)
        sql_query = """
            SELECT job_id, user_id, pages, status
            FROM print_jobs
            ORDER BY 
                CASE 
                    WHEN status = 'Pending' THEN 1
                    WHEN status = 'Approved' THEN 2
                    WHEN status = 'Voided' THEN 3
                    ELSE 4
                END,
                job_id ASC
        """
        cursor.execute(sql_query)
        requests = cursor.fetchall()

        y_pos = 345
        for request in requests:
            job_id = request['job_id']
            user_id = request['user_id'] or "N/A"
            pages = request['pages']
            status = str(request['status']).capitalize()

            # Display basic row data
            canvas.create_text(286, y_pos, text=job_id, anchor="nw", fill="#333333",
                                font=("Inter", 12), tags="request_row")
            canvas.create_text(360, y_pos, text=user_id, anchor="nw", fill="#333333",
                                font=("Inter", 12), tags="request_row")
            canvas.create_text(484, y_pos, text=pages, anchor="nw", fill="#333333",
                                font=("Inter", 12), tags="request_row")

            # --- Status coloring ---
            if status == "Approved":
                color = "#2E7D32"  # green
            elif status == "Voided":
                color = "#D32F2F"  # red
            elif status == "Pending":
                color = "#F9A825"  # yellow-ish for pending
            else:
                color = "#333333"

            # Draw status text only (no buttons)
            canvas.create_text(
                545, y_pos, text=status, anchor="nw",
                fill=color, font=("Inter Bold", 12),
                tags="request_row"
            )

            y_pos += 30  # move down per row

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Failed to fetch requests: {err}")
    finally:
        if conn and conn.is_connected():
            cursor.close()
            conn.close()

            update_pending_approvals_count()



# --- Rounded Rectangle Function ---
def round_rectangle(canvas, x1, y1, x2, y2, r=15, **kwargs):
    points = [
        x1 + r, y1, x2 - r, y1, x2, y1, x2, y1 + r,
        x2, y2 - r, x2, y2, x2 - r, y2, x1 + r, y2,
        x1, y2, x1, y2 - r, x1, y1 + r, x1, y1
    ]
    return canvas.create_polygon(points, smooth=True, **kwargs)


# --- Sidebar Buttons with Navigation ---
def open_admin_user():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_user.py"])

def open_admin_print():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_print.py"])

def open_admin_report():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_report.py"])

def open_admin_notification():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_notification.py"])

# --- Logout Function ---
def logout():
    messagebox.showinfo("Logged Out", "Logout successful!")
    subprocess.Popen([sys.executable, "login.py"])
    window.destroy()

def create_rounded_menu_button(canvas, x, y, w, h, text, command=None):
    rect = round_rectangle(canvas, x, y, x + w, y + h, r=10, fill="#FFFFFF", outline="#000000", width=1)
    txt = canvas.create_text(x + 25, y + 8, text=text, anchor="nw", fill="#000000", font=("Inter Bold", 15))

    def on_click(event):
        if command:
            command()

    def on_hover(event):
        canvas.itemconfig(rect, fill="#E8E8E8")
        window.config(cursor="hand2")

    def on_leave(event):
        canvas.itemconfig(rect, fill="#FFFFFF")
        window.config(cursor="")

    for tag in (rect, txt):
        canvas.tag_bind(tag, "<Button-1>", on_click)
        canvas.tag_bind(tag, "<Enter>", on_hover)
        canvas.tag_bind(tag, "<Leave>", on_leave)

# --- Window Setup ---
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(
    r"D:\downloadss\New folder\Tkinter\Tkinter-Designer-master\build\assets\frame4"
)


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window_width = 905
window_height = 534

screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
x = int((screen_width / 2) - (window_width / 2))
y = int((screen_height / 2) - (window_height / 2))
window.geometry(f"{window_width}x{window_height}+{x}+{y}")
window.configure(bg="#FFFFFF")
window.title("Admin Dashboard")

canvas = Canvas(window, bg="#FFFFFF", height=534, width=905, bd=0, highlightthickness=0, relief="ridge")
canvas.place(x=0, y=0)

# --- Layout / UI ---
canvas.create_rectangle(36.0, 20.0, 873.0, 518.0, fill="#FFFFFF", outline="#000000")
canvas.create_rectangle(48.0, 26.0, 251.0, 514.0, fill="#FFFFFF", outline="#000000")
image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(150.0, 92.0, image=image_image_1)


# --- Sidebar Buttons ---
# def create_rounded_menu_button(canvas, x, y, w, h, text, command=None):
#     rect = round_rectangle(canvas, x, y, x + w, y + h, r=10, fill="#FFFFFF", outline="#000000", width=1)
#     txt = canvas.create_text(x + 25, y + 8, text=text, anchor="nw", fill="#000000", font=("Inter Bold", 15))
#
#     def on_click(event):
#         if command:
#             command()
#
#     def on_hover(event):
#         canvas.itemconfig(rect, fill="#E8E8E8")
#         window.config(cursor="hand2")
#
#     def on_leave(event):
#         canvas.itemconfig(rect, fill="#FFFFFF")
#         window.config(cursor="")
#
#     for tag in (rect, txt):
#         canvas.tag_bind(tag, "<Button-1>", on_click)
#         canvas.tag_bind(tag, "<Enter>", on_hover)
#         canvas.tag_bind(tag, "<Leave>", on_leave)


# --- Sidebar Buttons ---
create_rounded_menu_button(canvas, 71, 150, 151, 38, "User", open_admin_user)
create_rounded_menu_button(canvas, 71, 206, 151, 38, "Print Jobs", open_admin_print)
create_rounded_menu_button(canvas, 71, 263, 151, 38, "Reports", open_admin_report)
create_rounded_menu_button(canvas, 71, 320, 151, 38, "Notifications", open_admin_notification)
create_rounded_menu_button(canvas, 71, 377, 151, 38, "Settings")
create_rounded_menu_button(canvas, 89, 450, 111, 38, "Logout", logout)

canvas.create_text(125.0, 120.0, anchor="nw", text="ADMIN", fill="#000000", font=("Inter Bold", -15))
canvas.create_text(276.0, 29.0, anchor="nw", text="DASHBOARD", fill="#000000", font=("Inter Bold", -48))
canvas.create_rectangle(262.99, 20.0, 264.0, 518.0, fill="#000000", outline="")

# --- STATUS PRINT REQUESTS Section ---
canvas.create_rectangle(276.0, 271.0, 660.0, 507.0, fill="#FFFFFF", outline="#000000")
canvas.create_text(286.0, 279.0, anchor="nw", text="STATUS PRINT REQUESTS",
                   fill="#000000", font=("Inter Bold", -24))
canvas.create_rectangle(275.0, 307.0, 660.0, 308.0, fill="#000000", outline="#000000")

# Headers
canvas.create_text(545.0, 315.0, anchor="nw", text="Status", fill="#000000", font=("Inter Bold", -15))
canvas.create_text(484.0, 315.0, anchor="nw", text="Pages", fill="#000000", font=("Inter Bold", -15))
canvas.create_text(360.0, 315.0, anchor="nw", text="User ID", fill="#000000", font=("Inter Bold", -15))
canvas.create_text(286.0, 315.0, anchor="nw", text="Req ID", fill="#000000", font=("Inter Bold", -15))

# --- Other Dashboard Sections ---
canvas.create_rectangle(670.0, 271.0, 865.0, 507.0, fill="#FFFFFF", outline="#000000")
canvas.create_text(740.0, 281.0, anchor="nw", text="ALERTS", fill="#000000", font=("Inter Bold", -24))
canvas.create_rectangle(284.0, 87.0, 432.0, 138.0, fill="#FFFFFF", outline="#000000")
canvas.create_text(310.0, 92.0, anchor="nw", text="Pending approvals", fill="#000000", font=("Inter Bold", -10))
canvas.create_rectangle(283.0, 205.0, 431.0, 256.0, fill="#FFFFFF", outline="#000000")
canvas.create_text(335.0, 208.0, anchor="nw", text="Revenue", fill="#000000", font=("Inter Bold", -10))
canvas.create_rectangle(283.0, 146.0, 431.0, 197.0, fill="#FFFFFF", outline="#000000")
canvas.create_text(313.0, 149.0, anchor="nw", text="Completed Today", fill="#000000", font=("Inter Bold", -10))
canvas.create_rectangle(447.0, 87.0, 595.0, 138.0, fill="#FFFFFF", outline="#000000")
canvas.create_text(476.0, 92.0, anchor="nw", text="In-progress prints", fill="#000000", font=("Inter Bold", -10))
canvas.create_rectangle(447.0, 146.0, 595.0, 197.0, fill="#FFFFFF", outline="#000000")
canvas.create_text(488.0, 149.0, anchor="nw", text="Voided Today", fill="#000000", font=("Inter Bold", -10))
canvas.create_rectangle(447.0, 205.0, 595.0, 256.0, fill="#FFFFFF", outline="#000000")
canvas.create_text(507.0, 208.0, anchor="nw", text="Users", fill="#000000", font=("Inter Bold", -10))
canvas.create_rectangle(677.0, 40.0, 763.0, 75.0, fill="#FFFFFF", outline="#000000")
canvas.create_rectangle(774.0, 40.0, 860.0, 75.0, fill="#FFFFFF", outline="#000000")
canvas.create_text(801.0, 50.0, anchor="nw", text="Filter", fill="#000000", font=("Inter Bold", -12))
canvas.create_text(686.0, 50.0, anchor="nw", text="Data Range", fill="#000000", font=("Inter Bold", -12))

# --- Populate table on load ---
fetch_and_display_requests()
update_pending_approvals_count()
update_voided_and_users_count()

window.resizable(False, False)
window.mainloop()
