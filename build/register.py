# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Entry, messagebox
import subprocess
import sys
import mysql.connector
import random  # For generating OTP
# Note: smtplib, MIMEText, MIMEMultipart are no longer needed here
# --- NEW IMPORTS ---
import os
from dotenv import load_dotenv
# --- Import from utils ---
from utils import get_db_connection, round_rectangle, send_verification_email

# --- LOAD ENVIRONMENT VARIABLES ---
load_dotenv()
# --- End of modification ---

# --- Asset Paths ---
OUTPUT_PATH = Path(__file__).parent
# Use relative path for assets
ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0"

def relative_to_assets(path: str) -> Path:
    asset_file = ASSETS_PATH / Path(path)
    if not asset_file.is_file():
        print(f"Warning: Asset not found at {asset_file}")
    return asset_file


# --- Placeholder Entry Class ---
class PlaceholderEntry(Entry):
    def __init__(self, master=None, placeholder="PLACEHOLDER", color="grey", show_char="", *args, **kwargs):
        super().__init__(master, *args, **kwargs)
        self.placeholder = placeholder
        self.placeholder_color = color
        self.default_fg_color = self["fg"]
        self.show_char = show_char
        self.bind("<FocusIn>", self.foc_in)
        self.bind("<FocusOut>", self.foc_out)
        self.put_placeholder()

    def put_placeholder(self):
        self.delete(0, "end")
        self.insert(0, self.placeholder)
        self["fg"] = self.placeholder_color
        if self.show_char:
            self.config(show="")

    def foc_in(self, *args):
        if self["fg"] == self.placeholder_color:
            self.delete("0", "end")
            self["fg"] = self.default_fg_color
            if self.show_char:
                self.config(show=self.show_char)

    def foc_out(self, *args):
        if not self.get():
            self.put_placeholder()

# --- DB Connection is now imported from utils ---

# --- Rounded rectangle function is now imported from utils ---

# --- Toggle password visibility ---
def toggle_password(entry, icon_item):
    # This function uses 'canvas' which needs to be accessible.
    # It's better if canvas is passed as an argument or if this
    # becomes part of a class structure eventually.
    # For now, assuming 'canvas' is globally accessible in this script context.
    if entry.cget("show") == "":
        entry.config(show="*")
        canvas.itemconfig(icon_item, text="üôà") # Use canvas instance
    else:
        entry.config(show="")
        canvas.itemconfig(icon_item, text="üëÅ") # Use canvas instance


# --- DELETED send_verification_email function ---

# --- MODIFIED: Register user (Validation + OTP) ---
def register_user():
    fullname = fullname_entry.get().strip()
    username = username_entry.get().strip()
    contact = contact_entry.get().strip()
    email = email_entry.get().strip()
    password = password_entry.get()
    confirm = confirm_entry.get()

    # --- Validation checks ---
    if not (fullname and username and email and password and confirm) or contact_entry.get() == contact_entry.placeholder: # Check placeholder too
        messagebox.showerror("Error", "All fields are required.")
        return
    if contact == contact_entry.placeholder: # Explicitly clear if placeholder
        contact = ""
    if not contact.isdigit(): messagebox.showerror("Error", "Contact No. must contain only numbers."); return
    if len(contact) != 11: messagebox.showerror("Error", "Contact No. must be 11 digits long."); return
    if not contact.startswith("09"): messagebox.showerror("Error", "Contact No. must start with '09'."); return
    if len(password) < 8: messagebox.showerror("Error", "Password must be at least 8 characters long."); return
    if not any(c.isupper() for c in password): messagebox.showerror("Error", "Password needs uppercase letter."); return
    if not any(c.islower() for c in password): messagebox.showerror("Error", "Password needs lowercase letter."); return
    if not any(c.isdigit() for c in password): messagebox.showerror("Error", "Password needs digit."); return
    if password != confirm: messagebox.showerror("Error", "Passwords do not match."); return
    if not email.lower().endswith("@gmail.com"): messagebox.showerror("Error", "Email must end with @gmail.com"); return

    # --- Check for duplicate users in DB ---
    conn = None # Initialize conn
    cursor = None # Initialize cursor
    try:
        conn = get_db_connection()
        if not conn: return # Exit if connection failed
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM users WHERE fullname=%s OR username=%s OR email=%s",
                       (fullname, username, email))
        if cursor.fetchone():
            messagebox.showerror("Error", "User with this fullname, username, or email already exists!")
            return # Keep finally block clean
        # No need to close here, finally will handle it
    except Exception as e:
        messagebox.showerror("Database Error", str(e))
        return # Exit on error
    finally:
        if cursor: cursor.close()
        if conn and conn.is_connected(): conn.close()


    # --- Change button to "Loading" state ---
    canvas.itemconfig(signup_text, text="Loading...")
    canvas.tag_unbind(signup_box, "<Button-1>")
    canvas.tag_unbind(signup_text, "<Button-1>")
    canvas.tag_unbind(signup_box, "<Enter>")
    canvas.tag_unbind(signup_text, "<Enter>")
    window.update_idletasks()

    # --- Generate and Send OTP ---
    otp_code = f"{random.randint(0, 999999):06d}"

    # --- Use imported function ---
    if not send_verification_email(email, otp_code): # Default subject and context
        # Email failed, reset button
        canvas.itemconfig(signup_text, text="Sign Up")
        canvas.tag_bind(signup_box, "<Button-1>", on_signup_click)
        canvas.tag_bind(signup_text, "<Button-1>", on_signup_click)
        canvas.tag_bind(signup_box, "<Enter>", on_hover_signup)
        canvas.tag_bind(signup_text, "<Enter>", on_hover_signup)
        return

    # --- Open OTP window ---
    otp_process = subprocess.Popen([
        sys.executable, "OTP.py",
        fullname, username, email, password, contact, otp_code
    ])

    window.withdraw()
    check_otp_status(otp_process)


# --- Function to check if OTP window is closed ---
def check_otp_status(process):
    if process.poll() is None:
        window.after(500, check_otp_status, process)
    else:
        window.destroy()

# --- Open login.py ---
def open_login():
    try:
        # Assuming login.py might be refactored later, but this still works
        subprocess.Popen([sys.executable, "login_frame.py"]) # Or potentially main.py?
        window.destroy()
    except Exception as e:
        messagebox.showerror("Error", f"Could not open login.\n{e}")

# --- Main Window ---
window = Tk()
window_width = 859; window_height = 604
screen_width = window.winfo_screenwidth(); screen_height = window.winfo_screenheight()
x = int((screen_width / 2) - (window_width / 2)); y = int((screen_height / 2) - (window_height / 2))
window.geometry(f"{window_width}x{window_height}+{x}+{y}")
window.configure(bg="#FFFFFF"); window.title("Create Account")

# --- Global canvas needed by toggle_password ---
canvas = Canvas(window, bg="#FFFFFF", height=604, width=851, bd=0, highlightthickness=0, relief="ridge")
canvas.place(x=0, y=0)

# --- UI Elements ---
# (Using round_rectangle from utils)
round_rectangle(canvas, 10.0, 15.0, 839.0, 589.0, r=0, fill="#FFFFFF", outline="#000000", width=3)
round_rectangle(canvas, 10.0, 15.0, 839.0, 100.0, r=0, fill="#000000", outline="")
round_rectangle(canvas, 242.0, 32.0, 601.0, 575.0, r=25, fill="#FFFFFF", outline="#000000", width=2)
canvas.create_text(283.0, 61.0, anchor="nw", text="CREATE ACCOUNT", fill="#000000", font=("Inter Bold", -32))
canvas.create_text(346.0, 100.0, anchor="nw", text="Fill in your details to register", fill="#000000", font=("Inter", -13))
round_rectangle(canvas, 367.0, 141.0, 545.0, 183.0, r=15, fill="#FFFFFF", outline="#000000", width=1) # fullname
round_rectangle(canvas, 367.0, 199.0, 545.0, 241.0, r=15, fill="#FFFFFF", outline="#000000", width=1) # username
round_rectangle(canvas, 367.0, 256.0, 545.0, 298.0, r=15, fill="#FFFFFF", outline="#000000", width=1) # contact
round_rectangle(canvas, 367.0, 313.0, 545.0, 355.0, r=15, fill="#FFFFFF", outline="#000000", width=1) # email
round_rectangle(canvas, 367.0, 370.0, 545.0, 412.0, r=15, fill="#FFFFFF", outline="#000000", width=1) # password
round_rectangle(canvas, 367.0, 427.0, 545.0, 469.0, r=15, fill="#FFFFFF", outline="#000000", width=1) # confirm
signup_box = round_rectangle(canvas, 367.0, 484.0, 545.0, 526.0, r=20, fill="#000000", outline="")
canvas.create_text(299.0, 154.0, anchor="nw", text="Full Name", fill="#000000", font=("Inter", -13))
canvas.create_text(297.0, 212.0, anchor="nw", text="Username", fill="#000000", font=("Inter", -13))
canvas.create_text(295.0, 269.0, anchor="nw", text="Contact No.", fill="#000000", font=("Inter", -13))
canvas.create_text(322.0, 326.0, anchor="nw", text="Email", fill="#000000", font=("Inter", -13))
canvas.create_text(295.0, 384.0, anchor="nw", text="Password", fill="#000000", font=("Inter", -13))
canvas.create_text(254.0, 442.0, anchor="nw", text="Confirm Password", fill="#000000", font=("Inter", -13))
signup_text = canvas.create_text(426.0, 498.0, anchor="nw", text="Sign Up", fill="#FFFFFF", font=("Inter", -16))
canvas.create_text(345.0, 536.0, anchor="nw", text="Already have account?", fill="#000000", font=("Inter", -14))
login_text = canvas.create_text(500.0, 534.0, anchor="nw", text="Login", fill="blue", font=("Inter Black", -16))

fullname_entry = Entry(window, bd=0, bg="#FFFFFF", highlightthickness=0, font=("Inter", 12))
username_entry = Entry(window, bd=0, bg="#FFFFFF", highlightthickness=0, font=("Inter", 12))
contact_entry = PlaceholderEntry(window, placeholder="e.g. 09xxxxxxxxx", bd=0, bg="#FFFFFF", highlightthickness=0, font=("Inter", 12))
email_entry = Entry(window, bd=0, bg="#FFFFFF", highlightthickness=0, font=("Inter", 12))
password_entry = Entry(window, bd=0, bg="#FFFFFF", highlightthickness=0, font=("Inter", 12), show="*")
confirm_entry = Entry(window, bd=0, bg="#FFFFFF", highlightthickness=0, font=("Inter", 12), show="*")

canvas.create_window(456, 162, window=fullname_entry, width=160, height=25)
canvas.create_window(456, 220, window=username_entry, width=160, height=25)
canvas.create_window(456, 277, window=contact_entry, width=160, height=25)
canvas.create_window(456, 334, window=email_entry, width=160, height=25)
canvas.create_window(456, 391, window=password_entry, width=140, height=25)
canvas.create_window(456, 448, window=confirm_entry, width=140, height=25)

eye_icon_pw = canvas.create_text(525, 382, anchor="nw", text="üëÅ", fill="black", font=("Arial", 12))
canvas.tag_bind(eye_icon_pw, "<Button-1>", lambda e: toggle_password(password_entry, eye_icon_pw))
canvas.tag_bind(eye_icon_pw, "<Enter>", lambda e: window.config(cursor="hand2"))
canvas.tag_bind(eye_icon_pw, "<Leave>", lambda e: window.config(cursor=""))
eye_icon_confirm = canvas.create_text(525, 439, anchor="nw", text="üëÅ", fill="black", font=("Arial", 12))
canvas.tag_bind(eye_icon_confirm, "<Button-1>", lambda e: toggle_password(confirm_entry, eye_icon_confirm))
canvas.tag_bind(eye_icon_confirm, "<Enter>", lambda e: window.config(cursor="hand2"))
canvas.tag_bind(eye_icon_confirm, "<Leave>", lambda e: window.config(cursor=""))

def on_signup_click(e): register_user()
def on_hover_signup(e): window.config(cursor="hand2")
def on_leave_signup(e): window.config(cursor="")
canvas.tag_bind(signup_box, "<Button-1>", on_signup_click)
canvas.tag_bind(signup_text, "<Button-1>", on_signup_click)
canvas.tag_bind(signup_box, "<Enter>", on_hover_signup)
canvas.tag_bind(signup_text, "<Enter>", on_hover_signup)
canvas.tag_bind(signup_box, "<Leave>", on_leave_signup)
canvas.tag_bind(signup_text, "<Leave>", on_leave_signup)
canvas.tag_bind(login_text, "<Button-1>", lambda e: open_login())
canvas.tag_bind(login_text, "<Enter>", lambda e: window.config(cursor="hand2"))
canvas.tag_bind(login_text, "<Leave>", lambda e: window.config(cursor=""))

window.resizable(False, False)
window.mainloop()